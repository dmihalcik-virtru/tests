import tokenRequester from 'keycloak-request-token';
import {expect, test} from "@playwright/test";
import {constants} from "http2";

// @ts-ignore
const {authority, entitlements, clientId, realm} = JSON.parse(process.env.SERVER_DATA);
const {grantor} = JSON.parse(process.env.TEST_DATA);

const baseUrl = authority.substring(0, authority.length - 1);
const settings = {
    username: grantor.username,
    password: grantor.password,
    grant_type: 'password',
    client_id: clientId,
    realmName: realm
};

test('keycloak test', async ({request}) => {
    const response = await request.get(`${authority}`, {});
    expect(response.ok()).toBeTruthy();
});
// Request context is reused by all tests in the file.
let apiContext;

test.beforeAll(async ({playwright}) => {
    const token = await tokenRequester(baseUrl, settings);
    apiContext = await playwright.request.newContext({
        extraHTTPHeaders: {
            'Authorization': `Bearer ${token}`,
        },
    });
})

test.afterAll(async ({}) => {
    // Dispose all responses.
    await apiContext.dispose();
});

test('entitlements header test', async ({request}) => {
    const response = await apiContext.get(`${entitlements}/entitlements`, {});
    expect(response.status()).toBe(constants.HTTP_STATUS_OK);
    const headers = response.headers();
    // console.log(headers);
    expect(headers['x-content-type-options']).toBeTruthy();
    await expect(headers['x-content-type-options']).toContain('nosniff');
});
